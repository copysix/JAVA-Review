2. Java数据类型

2.1 八种四类，长度各多少，取值范围

2.2 Java数据类型会随着 OS 的32位或者64位发生变化吗？

2.3 int和integer的区别

2.4 装箱和拆箱的意义

2.5 值传递和引用传递

2.6 int常量池和String常量池

2.7 常量池存放位置

2.8 == 和equals

2.9 String内部的hashcode()

2.10 String StringBuffer StringBuilder


其它部分还有图表还是看自己之前的文档啦～


2021.3.12 复习回顾：

2.1 八种四类，长度各多少，取值范围
八种：
整型：byte(1) short(2) int(4) ###long(8)（long总是记不住）
浮点型：float(4) double(8)
字符型：char(2)
布尔型：bool(true/false两种取值，但是也有的文章说是1个字节)

长度：
对于整型来说就是 [-2^count, -2^count+1]
对于浮点数来说：float和double类型的数值其实都是由1.x * e^(2^指数位)来决定的
例如float的指数位有7位，那么float的取值范围就是[1.1 * e^(-128), 1.1 * e^127] 并 [-1.1 * e^(127), -1.1 * e^(-128)]
同理，double的指数位有10位，那么float的取值范围就是[1.1 * e^(-1024), 1.1 * e^1023] 并 [-1.1 * e^(1023), -1.1 * e^(-1024)]
对于字符型char, 取值是[0, 65535]也就是[0, 2^16]


2.2 Java数据类型会随着 OS 的32位或者64位发生变化吗？
JAVA的基本数据类型不会，JAVA的引用类型有可能会，例如new Double()和new Long(),从16->24，对象数组也是有变化
C++会

2.3 int和integer的区别
int 是基本数据类型，Integer其实是int的封装类。


2.4 装箱和拆箱的意义
int->Integer的过程称为装箱，JAVA是面向对象的，用Integer对象可以方便进行对象间操作。
Integer->int的过程成为拆箱，基本数据类型的数据如果都用对象来存的话，不仅花费较多存储还会增加CPU负担


2.5 值传递和引用传递
传递的参数值还是传递的对对象的引用。关于引用和对象本身的区别，其实可以参考浅拷贝和深拷贝来理解，浅拷贝拷贝的是引用，如果a,b是同一个对象的引用，那么改变a对应的对象，b对应的对象自然会发生改变。但是如果是深拷贝，是相当于创建了一个新的对象，开辟了新的对象空间，互相之间就没有这种影响啦。


2.6 int常量池和String常量池
当使用Integer对象来存取int型数据时，如果数值在[-128,127]，那么是相当于直接从int常量池中获取了一个对象的引用，也就是最后返回的是常量池已经缓存的对象实例。

String本身就是类，创建String对象的方式有两种，一种是根据字面量创建，一种是new一个String对象。根据字面量创建的实例其实是String常量池里的一个实例，而new的String对象是堆中的对象。


2.7 常量池存放位置
jdk1.6以前，常量池都放在方法区的持久代，持久代其实是方法区的实现，jdk1.7时，将字符串常量池放在堆中，运行时常量池在方法区，jdk1.8后除了字符串常量池以外，其他部分放到了元空间（相当于对方法区的新的实现）

2.8 持久代和元空间
元空间和永久代都相当于对方法区的实现，但元空间与永久代之间最大的区别在于：元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制，但可以通过参数来指定元空间的大小。


